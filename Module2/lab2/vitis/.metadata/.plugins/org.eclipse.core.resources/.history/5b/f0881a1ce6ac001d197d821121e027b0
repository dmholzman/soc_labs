/******************************************************************************
*
* Dirk Holzman
* Lab 2 Audio Player
* 2/15/2023
*
******************************************************************************/

/*
 * lab2_player.c: top level software for audio player. Generates messages to
 * initialize codec and handle reset. Interfaces with user over serial port,
 * baud rate 115200. User can load a serial .dat file and play it continuously
 * or a single time. Files can be overwritten up to 16kB.
 */

// Notes from lab description: A word is sized as 4 bytes, max file size is 16 kB

#include "stdio.h"
#include "stdlib.h"
#include "platform.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xparameters.h"
#include "xiic.h"
#include "xgpio_l.h"
#include "xllfifo.h"
#include "xuartps.h"
#include "string.h"

#define IIC_BASE_ADDRESS	XPAR_IIC_0_BASEADDR
#define FIFO_BASE_ADDRESS   XPAR_AXI_FIFO_MM_S_0_BASEADDR
#define UART_BASE_ADDRESS   XPAR_XUARTPS_0_BASEADDR
#define CODEC_ADDRESS		0b0011010
#define FILE_SIZE 16000
#define SAMPLE_RATE_HZ 48828.125

// Global Variables
// Byte ordering little endian (LeftLSB, LeftMSB, RightLSB, RightMSB)
// Little endian is where least significant bytes are stored before the more significant bytes
uint8_t sineLUT[] = {0x00,0x00,0x00,0x00, // 0
					 0x9E,0x1B,0x9E,0x1B, // 7070
					 0x10,0x27,0x10,0x27, // 10000
					 0x9E,0x1B,0x9E,0x1B, // 7070
					 0x00,0x00,0x00,0x00, // 0
					 0x62,0xE4,0x62,0xE4, // -7070
					 0xF0,0xD8,0xF0,0xD8, // -10000
					 0x62,0xE4,0x62,0xE4}; // -7070

uint8_t quiet[] = {0x00,0x00,0x00,0x00};
size_t loaded_data_wc; // want this to be accessible across functions

// Function to write to a register in the SSM2603 given the register number and value to write
void write_codec_register(u8 regnum, u16 regval)
{
	uint16_t buffer;
	uint8_t bufferSplit[2];

	buffer = ((uint16_t)regnum << 9) | regval; // combine both regnum and regval
	bufferSplit[0] = (uint8_t)(buffer >> 8);
	bufferSplit[1] = (uint8_t)(buffer);

	XIic_Send(IIC_BASE_ADDRESS, CODEC_ADDRESS, bufferSplit, (unsigned)2, XIIC_STOP);
	return;
}

// Function to set the reset signal
void set_dacif_resetn(u8 resetval)
{
	XGpio_WriteReg(XPAR_RESET_AND_LEDS_BASEADDR, XGPIO_DATA_OFFSET, resetval);
	return;
}

// Function to configure the codec per the class notes
void configure_codec()
{
	set_dacif_resetn(1);
	write_codec_register(15, 0x00);
	usleep(1000);
	write_codec_register(6, 0x30);
	write_codec_register(0, 0x17);
	write_codec_register(1, 0x17);
	write_codec_register(2, 0x79);
	write_codec_register(3, 0x79);
	write_codec_register(4, 0x10);
	write_codec_register(5, 0x00);
	write_codec_register(7, 0x02);
	write_codec_register(8, 0x00);
	usleep(75000);
	write_codec_register(9, 0x01);
	write_codec_register(6, 0x00);
	set_dacif_resetn(0);
}

// Helper function to determine number of repetitions of currently loaded data set
// to play for the requested time duration (in seconds). When typecast, the value
// is rounded to the nearest integer repetitions so it may not exactly match in seconds.
int secsToReps(int timeSecs)
{
	int reps = (int) (timeSecs * SAMPLE_RATE_HZ) / (loaded_data_wc);
	return reps;
}

// Function to play loaded data based on its length. Will playback with Little Endianness in mind.
// Words stored in files as (LeftLSB, LeftMSB, RightLSB, RightMSB) and need to be made into words ordered
// LeftMSB, LeftLSB, RightMSB, RightLSB so that we tx out right then left, LSB to MSB
void playback(uint8_t *loaded_data)
{
	uint32_t word;

	for(int i = 0 ; i < loaded_data_wc ; i++)
	{
		word = (loaded_data[i*4] << 16) + (loaded_data[1+i*4] << 24) + (loaded_data[2+i*4]) + (loaded_data[3+i*4] << 8);
	    // Read from the transmit vacancy register, if nonzero can write to register
		// alternatively use XLlFifo_iTxVacancy
	    if (XLlFifo_ReadReg(FIFO_BASE_ADDRESS, XLLF_TDFV_OFFSET))
	    {
	    	XLlFifo_WriteReg(FIFO_BASE_ADDRESS, XLLF_TDFD_OFFSET, word);
	    	// alternatively use XLlFifo_TxPutWord
	    }
	    // Write length of word in bytes to transmit length to start transmit of word
	    // alternatively use XLlFifo_iTxSetLen
   		XLlFifo_WriteReg(FIFO_BASE_ADDRESS, XLLF_TLF_OFFSET, 4);
   		// Need to wait for the transmit of the word to complete by comparing with mask for transmit complete
   		while (!(XLlFifo_ReadReg(FIFO_BASE_ADDRESS, XLLF_ISR_OFFSET) & XLLF_INT_TC_MASK)) {}
   	}
	return;
}

// Function to load a .dat file over UART into the loaded_data memory for playback
int load_file(uint8_t *loaded_data)
{
	unsigned int size_words = 0;
	unsigned int size_bytes = 0;
	uint8_t byte;

	// XUartPs_IsReceiveData returns true if there is receive data, else false
	// Infinite while loop while no receive data to wait
	while (!XUartPs_IsReceiveData(UART_BASE_ADDRESS)) {}

	// Once data present, check the first word for the file length (little endian)
	for (int byte_ix = 0; byte_ix < 4; byte_ix++) {
	  	byte = XUartPs_RecvByte(UART_BASE_ADDRESS);
	   	size_words += (byte << (byte_ix * 8)); // since LSBs are first, they will shift less
	}

	size_bytes = size_words *4;

	//printf ("\nFile size: %d 32-bit words, or %d bytes\n", fileSize_words,fileSize_bytes*sizeof(uint8_t));
	// Check that number of bytes requested is valid
	if ((fileSize_bytes < 0) || (fileSize_bytes > MAX_FILE_SIZE)) {
	  	printf("  Invalid number of bytes requested: %d bytes (Limits: 0 to %d)\n\r",fileSize_bytes*sizeof(uint8_t),MAX_FILE_SIZE);
	   	return 1;//exit(1);
	} else {
		// Re-allocate memory space
		loaded_data_ptr = realloc(loaded_data_ptr, fileSize_bytes);
		if (loaded_data_ptr == NULL) {
			print("Cannot allocate memory for the loaded data during realloc, exiting\n");
			exit(1);
		}
		printf("  Reading a file size of %d bytes, or %d samples...\n\r",fileSize_bytes,fileSize_words);
		// read the rest of the array
		for (readInIdx = 0 ; readInIdx < fileSize_bytes ; readInIdx++) {
			loaded_data_ptr[readInIdx] = XUartPs_RecvByte(UART_BASE_ADDRESS);
		}
		loaded_data_word_count = fileSize_words;
		// Flush any remaining data
		while (XUartPs_IsReceiveData(UART_BASE_ADDRESS)) {
			XUartPs_RecvByte(UART_BASE_ADDRESS);
		}
		//size_t arrSize = sizeof (wordArr) / sizeof (wordArr[0]);
		//printf ("Read-in file size: %u words\n\n", arrSize);
	}
  	return 0;
}

int main()
{
    init_platform();

    // Setup and init
    print("Lab 2 Audio Player by Dirk Holzman\n\r");
    print("Sending 0x3 to the LEDs with LED2 tied to reset...\n\r");
    XGpio_WriteReg(XPAR_RESET_AND_LEDS_BASEADDR, XGPIO_DATA2_OFFSET, 0x03);

    print("Resetting DAC interface and configuring CODEC...\n\r");
    configure_codec();
    print("CODEC configured!\n\r");

    // Load sine LUT and play 6kHz tone
    uint8_t *loaded_data = (uint8_t*) calloc(1, sizeof(uint8_t)); // initial memory allocation
    loaded_data = realloc(loaded_data, sizeof(sineLUT)); // reallocate to fit sineLUT
    memcpy(loaded_data, sineLUT, sizeof(sineLUT)); // copy contents of sineLUT to loaded_data location
    loaded_data_wc = sizeof(sineLUT) / 4;

    print("Briefly playing a test 6 kHz tone... \n\r");
    for (int rep = 0; rep < secsToReps(3); rep++)
    {
    	playback(loaded_data);
    }

    cleanup_platform();
    return 0;
}
