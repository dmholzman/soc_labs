/******************************************************************************
*
* Dirk Holzman
* Lab 3 SDR Signal Source
* 2/15/2023
*
******************************************************************************/

/*
 * lab3b_player.c: top level software for audio player based on SDR signal source.
 * Generates messages to initialize codec and handle reset. Interfaces with user
 * over serial port, baud rate 115200. User can change the output frequency as desired.
 */

#include "stdio.h"
#include "stdlib.h"
#include "platform.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xparameters.h"
#include "xiic.h"
#include "xgpio_l.h"
#include "xuartps.h"

#define IIC_BASE_ADDRESS	XPAR_IIC_0_BASEADDR
#define UART_BASE_ADDRESS   XPAR_XUARTPS_0_BASEADDR
#define CODEC_ADDRESS		0b0011010

// Global Variables
int fs = 125000000; // 125 MHz
int N = 27; // bits in phase accumulator

// Function to write to a register in the SSM2603 given the register number and value to write
void write_codec_register(u8 regnum, u16 regval)
{
	uint16_t buffer;
	uint8_t bufferSplit[2];

	buffer = ((uint16_t)regnum << 9) | regval; // combine both regnum and regval
	bufferSplit[0] = (uint8_t)(buffer >> 8);
	bufferSplit[1] = (uint8_t)(buffer);

	XIic_Send(IIC_BASE_ADDRESS, CODEC_ADDRESS, bufferSplit, (unsigned)2, XIIC_STOP);
	return;
}

// Function to set the reset signal for the DAC
void set_dacif_resetn(u8 resetval)
{
	XGpio_WriteReg(XPAR_AXI_RESETN_BASEADDR, XGPIO_DATA_OFFSET, resetval);
	return;
}

// Function to configure the codec per the class notes
void configure_codec()
{
	set_dacif_resetn(0);
	write_codec_register(15, 0x00);
	usleep(1000);
	write_codec_register(6, 0x30);
	write_codec_register(0, 0x17);
	write_codec_register(1, 0x17);
	write_codec_register(2, 0x79);
	write_codec_register(3, 0x79);
	write_codec_register(4, 0x10);
	write_codec_register(5, 0x00);
	write_codec_register(7, 0x02);
	write_codec_register(8, 0x00);
	usleep(75000);
	write_codec_register(9, 0x01);
	write_codec_register(6, 0x00);
	set_dacif_resetn(1);
}

void print_menu()
{

}

int

int main()
{
    init_platform();

    // Setup and init
    print("Resetting DAC interface and configuring CODEC...\n\r");
    configure_codec();
    print("CODEC configured!\n\n\r");

    print("Lab 3 SDR Signal Source by Dirk Holzman\n\r");

    // Print UI
    uint8_t keystroke; // 256 ASCII characters, so need an 8-bit unsigned int
    int result;

    // NEED MENU FUNCTION
    print("Thank you for your patience. Welcome to the audio playback system!\n\r");
    print("Press L to load a file.\n\r");
    print("Press C to play a loaded file continuously.\n\r");
    print("Press S to play a loaded file once.\n\r");
    while(1)
    {
    	keystroke = XUartPs_RecvByte(UART_BASE_ADDRESS);

    	// allow both lowercase and uppercase characters
    	if ((keystroke == 'P') || (keystroke == 'p')) // reprint menu
    	{

    	}
    	else if ((keystroke == 'F') || (keystroke == 'f')) // set frequency, take in an input string in Hz
    	{
    		//sscanf or atoi (wait for carriage return)
    		// NEED FUNCTION THAT TAKES IN INPUT, GENERATES PINC, SENDS TO GPIO, AND PRINTS NEW FREQ AND PINC
    		// use 64 bit (floating point, long long) for calculation, return 32 bit
    	}
    	else if ((keystroke == 'u')) // up 100 Hz
    	{

    	}
    	else if ((keystroke == 'U')) // up 1000 Hz
    	{

    	}
    	else if ((keystroke == 'd')) // down 100 Hz
    	{

    	}
    	else if ((keystroke == 'D')) // down 1000 Hz
    	{

    	}
    	else if ((keystroke == 'z') || (keystroke == 'Z')) // pulse reset line to DAC to set phase (not freq) to 0
    	{
    		XGpio_WriteReg(XPAR_AXI_RESETN_BASEADDR, XGPIO_DATA2_OFFSET, 0);
    		XGpio_WriteReg(XPAR_AXI_RESETN_BASEADDR, XGPIO_DATA2_OFFSET, 1);
    	}
    	else
    		print("Invalid input. Please press L, C, or S.\n\r");
    }

    cleanup_platform();
    return 0;
}
